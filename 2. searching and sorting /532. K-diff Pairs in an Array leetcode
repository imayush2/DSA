// Two pointers
class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
     
     sort(nums.begin(),nums.end());   
     int i=0;
     int j=1;
     int ans=0;

     while(i<nums.size() && j<nums.size()){
         if(nums[j]-nums[i]==k){
             ans++;
             i++;
             j++;
            while(j<nums.size() && nums[j]==nums[j-1]){
                j++;
            }
         }
         else if(nums[j]-nums[i]>k){
             i++;
             if(j-i==0){
                 j++;}
         }
         else{
             j++;
        }
     }
       return ans;
    }
};


// binary search 

class Solution {
public:
    int bs(vector<int>& nums,int start,int x){
        int end=nums.size()-1;
        int mid=start+(end-start)/2;
        
        while(start<=end){
//agar value milgaya to use return karwao
            if(nums[mid]==x){
                return mid;
            }
//agar value mid is small hai to end ko peeche kar do 
            if(nums[mid]>x){
                end=mid-1;
            }
//agar value greater hai mid se to start ko mid +1 kar do
            else{
                start=mid+1;
            }
//update the mid value
           mid=start+(end-start)/2;
        }
        return -1;
    }
    int findPairs(vector<int>& nums, int k) {
        sort(nums.begin(),nums.end());
    //set will print unique value
        set<pair<int,int>>s;
        for(int i=0;i<nums.size()-1;i++){
            //agar nums[i]+k ka value aage array mai present hai to to usko print karwao.with the help of binary search
            if(bs(nums,i+1,nums[i]+k)!=-1){
                s.insert({nums[i],nums[i]+k});
            }
        }
        return s.size();
    }
};
