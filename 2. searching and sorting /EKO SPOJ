#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

bool isPossibleSol(vector<long long int> trees, long long int m, long long int mid){
  long long int woodCollected = 0;
  for(int i=0; i<trees.size();i++){
    if(trees[i]>mid){
      woodCollected += trees[i]-mid;
    }
  }
  return woodCollected >= m;
}

long long int maxSawBladeHeight(vector<long long int> trees, long long int m){
  long long int start =0 , end, ans = -1;
  end = * max_element(trees.begin(),trees.end());


  while(start<=end){
   long long int  mid = (start + end)/2;

    if(isPossibleSol(trees,m,mid)) {
      ans = mid;
      start = mid +1;
    }
    else {
      end = mid -1;
    }
  }
    return ans;
  
}

int main(){

  long long int n,m;

  cout<<"enter value of n :";
  cin>>n;
  cout<<"enter value of m :";
  cin>>m;
  vector<long long int > trees;

  while(n--){
    long long int height;
    cout<<"enter height of trees ";
    
    cin>>height;
    trees.push_back(height);
  }

  cout<<maxSawBladeHeight(trees, m)<<endl;

  return 0;
  
}
