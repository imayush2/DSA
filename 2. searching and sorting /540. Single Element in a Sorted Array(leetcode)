Solved using Array(Two Nested Loop). Brute Force Approach.
Solved using Array + Hash Table(Unordered map).
Solved using Linear Search.
Solved using Bit Manipulation(xor).
Solved using Binary Search. Optimized Approach


//Brute force 
// TLE

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size();
        for(int i=0; i<n; i++){
            int count = 0;
            for(int j=0; j<n; j++){
                if(nums[i] == nums[j]) count++;
            }
            if(count == 1) return nums[i];
        }
        return -1;
    }
};


// Hash Table

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        unordered_map<int, int> map;
        for(auto num : nums){
            map[num]++;
        }
        for(auto num : map){
            if(num.second == 1) return num.first;
        }
        return -1;
    }
};
// TC O(n)
// SC O(1)


// Linear Search 

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size();
        for(int i=0; i<n-1; i+=2){
            if(nums[i] != nums[i+1]){
                return nums[i];
            }
        }
        return nums[n-1];
    }
};
// TC O(N)
// SC O(1)


// XOR 

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int Xor = 0;
        for(auto num : nums){
            Xor ^= num;
        }
        return Xor;
    }
};

// TC O(N)
// SC O(1)


//Binary search 

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int left = 0, right = nums.size() - 1;
        while (left < right) {
            int mid = (left + right) / 2;
            if (mid % 2 == 1) {
                mid--;
            }
            if (nums[mid] != nums[mid + 1]) {
                right = mid;
            } else {
                left = mid + 2;
            }
        }
        return nums[left];
    }
};
// TC O(Nlogn)
// SC O(1)
