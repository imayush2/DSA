class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        // repositioning head
        head = new ListNode(-1, head);
        // support variables
        ListNode *prev1 = head, *prev2 = head, *curr = head;
        // finding prev1
        while (--k) {
            prev1 = prev1->next;
            curr = curr->next;
        }
        curr = curr->next;
        // finding prev2
        while (curr->next) {
            prev2 = prev2->next;
            curr = curr->next;
        }
        // switching nodes, with n1 = prev1->next and n2 = prev2->next:
        // edge case: n1->next = n2
        if (prev1->next == prev2) {
            // storing n2 in curr
            curr = prev2->next;
            // attaching n2->next right after n1
            prev1->next->next = prev2->next->next;
            // attaching n1 after n2
            curr->next = prev1->next;
            // attaching n2 to prev1
            prev1->next = curr;
            return head->next;
        }
        // storing n1 in curr
        curr = prev1->next;
        // attaching n2 right after prev1
        prev1->next = prev2->next;
        // since prev1 is no longer needed, we will use it to store next2 = n2->next
        prev1 = prev2->next->next;
        // finishing splicing n2 in place
        prev2->next->next = curr->next;
        // adding n1 after prev2
        prev2->next = curr;
        // connecting n2->next riht after n1
        curr->next = prev1;
        return head->next;
    }
};
