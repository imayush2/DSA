// Brute Force

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {

        for(int i = 0 ; i < nums.size() ; i++){
            for(int j = i + 1 ; j < nums.size() ; j ++){
                if(nums[i] + nums[j] == target){
                    return {i, j};
                }
            }
        }

      return {-1,-1};
        
    }
};

// time cimplexity : O(n^2)
// space complexity : O(1)


//sorting + Two pointers

class Solution{
public:
	vector<int> twoSum(vector<int> &nums, int target)
	{
		int n = nums.size();

		vector<pair<int, int>> v;
		for (int i = 0; i < n; i++)
		v.push_back({ nums[i], i });
		
        sort(v.begin(), v.end());

		int s = 0;
		int e = n - 1;
		while (s < e)
		{
			int sum = v[s].first + v[e].first;
			if (sum == target)
				return { v[s].second, v[e].second };

			if (target < sum)
				e--;
			else
				s++;

		}
		return {-1,-1};
	}
};

// time cimplexity : O(nlogn)
// space complexity : O(n)


//Map

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
        unordered_map<int, int> hash;
        for (int i = 0; i < nums.size(); i++) {
            if (hash.find(target - nums[i]) != hash.end()) {
                return {hash[target - nums[i]], i};
            }
            hash[nums[i]] = i;
        }
        return {};
    }
};

// time cimplexity : O(n)
// space complexity : O(n)
