// XOR 

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int ans=0;
        
        for(int i=0;i<nums.size();i++){
            ans^=nums[i];
            ans^=i+1;
        }
        return ans;
    }
};

// SUM 
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int sum = 0;
        int total = nums.size()*(nums.size() + 1)/2;
        for (auto number : nums) {
            sum += number;
        }
        return total - sum;
    }
};


// Binary search 

class Solution {
public:
    int missingNumber(vector<int>& nums) {
       sort(nums.begin(),nums.end());
       
       int s=0;
       int e=nums.size()-1;
       int mid = s+(e-s)/2;
       
       while(s<=e)
       {
           if(nums[mid]<=mid)
                s=mid+1;
            else
                e=mid-1;
        mid = s+(e-s)/2;
       }
       return s;
    }
};
