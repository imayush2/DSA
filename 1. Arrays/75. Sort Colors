//counting method 
class Solution {
public:
    void sortColors(vector<int>& nums) {
        
        int zeros=0,ones=0,twos=0;
        
        //count 
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0){
                zeros++;
            }
             if(nums[i]==1){
                ones++;
            }
             if(nums[i]==2){
                twos++;
            }
        }

        //spread
        int i=0;
        while(zeros--){
            nums[i]=0;
            i++;
        }
         while(ones--){
            nums[i]=1;
            i++;
        }
        while(twos--){
            nums[i]=2;
            i++;
        }



    }
};
// time complexity = O(n)
//space complexity =O(1)


//In-place method 

class Solution {
public:
    void sortColors(vector<int>& nums) {
     
     int low=0,mid=0,high=nums.size()-1;

     while(mid<=high){
         if(nums[mid]==0){
             swap(nums[low],nums[mid]);
             low++;
             mid++;
         }
         else if(nums[mid]==1){
             mid++;
         }
         else{
             swap(nums[mid],nums[high]);
             high--;
         }
     }

    }
};
